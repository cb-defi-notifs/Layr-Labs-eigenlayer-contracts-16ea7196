diff -druN ../sDataLayr/BLSRegistryWithBomb.sol DataLayr/BLSRegistryWithBomb.sol
--- ../sDataLayr/BLSRegistryWithBomb.sol	2022-12-28 09:56:31.000000000 -0800
+++ DataLayr/BLSRegistryWithBomb.sol	2022-12-21 07:19:44.000000000 -0800
@@ -9,8 +9,6 @@
 import "../libraries/BytesLib.sol";
 import "../middleware/BLSRegistry.sol";
 
-// import "forge-std/Test.sol";
-
 /**
  * @title Adds Proof of Custody functionality to the `BLSRegistry` contract.
  * @author Layr Labs, Inc.
diff -druN ../sDataLayr/EphemeralKeyRegistry.sol DataLayr/EphemeralKeyRegistry.sol
--- ../sDataLayr/EphemeralKeyRegistry.sol	2022-12-28 09:56:31.000000000 -0800
+++ DataLayr/EphemeralKeyRegistry.sol	2022-12-21 07:19:44.000000000 -0800
@@ -6,8 +6,6 @@
 import "../interfaces/IServiceManager.sol";
 import "@openzeppelin-upgradproxy/utils/Initializable.sol";
 
-import "forge-std/Test.sol";
-
 /**
  * @title Registry of Ephemeral Keys for operators, designed for use with Proofs of Custody.
  * @author Layr Labs, Inc.
@@ -18,7 +16,7 @@
  * @notice See the Dankrad's excellent article for an intro to Proofs of Custody:
  * https://dankradfeist.de/ethereum/2021/09/30/proofs-of-custody.html.
  */
-contract EphemeralKeyRegistry is Initializable, IEphemeralKeyRegistry, DSTest {
+contract EphemeralKeyRegistry is Initializable, IEphemeralKeyRegistry {
 
     // max amount of blocks that an operator can use an ephemeral key
     uint32 public constant USAGE_PERIOD_IN_BLOCKS = 648000; //90 days at 12s/block
diff -druN ../score/EigenLayrDelegation.sol core/EigenLayrDelegation.sol
--- ../score/EigenLayrDelegation.sol	2022-12-28 09:56:31.000000000 -0800
+++ core/EigenLayrDelegation.sol	2022-12-21 07:19:44.000000000 -0800
@@ -19,7 +19,7 @@
  * - enabling any staker to delegate its stake to the operator of its choice
  * - enabling a staker to undelegate its assets from an operator (performed as part of the withdrawal process, initiated through the InvestmentManager)
  */
-contract EigenLayrDelegation is Initializable, OwnableUpgradeable, EigenLayrDelegationStorage, Pausable, DSTest {
+contract EigenLayrDelegation is Initializable, OwnableUpgradeable, EigenLayrDelegationStorage, Pausable {
     uint8 internal constant PAUSED_NEW_DELEGATION = 0;
 
     /// @notice Simple permission for functions that are only callable by the InvestmentManager contract.
diff -druN ../score/Slasher.sol core/Slasher.sol
--- ../score/Slasher.sol	2022-12-28 09:56:31.000000000 -0800
+++ core/Slasher.sol	2022-12-21 07:19:44.000000000 -0800
@@ -9,8 +9,6 @@
 import "@openzeppelin-upgradaccess/OwnableUpgradeable.sol";
 import "@openzeppelin-upgradproxy/utils/Initializable.sol";
 
-import "forge-std/Test.sol";
-
 /**
  * @title The primary 'slashing' contract for EigenLayr.
  * @author Layr Labs, Inc.
@@ -20,7 +18,7 @@
  * - tracking historic stake updates to ensure that withdrawals can only be completed once no middlewares have slashing rights
  * over the funds being withdrawn
  */
-contract Slasher is Initializable, OwnableUpgradeable, ISlasher, Pausable, DSTest {
+contract Slasher is Initializable, OwnableUpgradeable, ISlasher, Pausable {
     using StructuredLinkedList for StructuredLinkedList.List;
 
     uint256 private constant HEAD = 0;
diff -druN ../smiddleware/BLSPublicKeyCompendium.sol middleware/BLSPublicKeyCompendium.sol
--- ../smiddleware/BLSPublicKeyCompendium.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/BLSPublicKeyCompendium.sol	2022-12-21 07:19:44.000000000 -0800
@@ -4,13 +4,12 @@
 import "../interfaces/IBLSPublicKeyCompendium.sol";
 import "../libraries/BN254.sol";
 import "../libraries/BLS.sol";
-import "forge-std/Test.sol";
 
 /**
  * @title A shared contract for EigenLayer operators to register their BLS public keys.
  * @author Layr Labs, Inc.
  */
-contract BLSPublicKeyCompendium is IBLSPublicKeyCompendium, DSTest {
+contract BLSPublicKeyCompendium is IBLSPublicKeyCompendium {
     //Hash of the zero public key: BLS.hashG1Point(G1Point(0,0))
     bytes32 internal constant ZERO_PK_HASH = hex"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5";
 
diff -druN ../smiddleware/BLSRegistry.sol middleware/BLSRegistry.sol
--- ../smiddleware/BLSRegistry.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/BLSRegistry.sol	2022-12-21 07:19:44.000000000 -0800
@@ -6,7 +6,6 @@
 import "../interfaces/IBLSRegistry.sol";
 import "../libraries/BN254.sol";
 import "../libraries/BLS.sol";
-import "forge-std/Test.sol";
 
 /**
  * @title A Registry-type contract using aggregate BLS signatures.
@@ -16,7 +15,7 @@
  * - committing to and finalizing de-registration as an operator
  * - updating the stakes of the operator
  */
-contract BLSRegistry is RegistryBase, IBLSRegistry, Test {
+contract BLSRegistry is RegistryBase, IBLSRegistry {
     using BytesLib for bytes;
 
     // Hash of the zero public key
diff -druN ../smiddleware/BLSSignatureChecker.sol middleware/BLSSignatureChecker.sol
--- ../smiddleware/BLSSignatureChecker.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/BLSSignatureChecker.sol	2022-12-21 07:19:44.000000000 -0800
@@ -6,14 +6,12 @@
 import "../libraries/BytesLib.sol";
 import "../libraries/DataStoreUtils.sol";
 import "../libraries/BLS.sol";
-
-import "forge-std/Test.sol";
 /**
  * @title Used for checking BLS aggregate signatures from the operators of a `BLSRegistry`.
  * @author Layr Labs, Inc.
  * @notice This is the contract for checking the validity of aggregate operator signatures.
  */
-abstract contract BLSSignatureChecker is Test {
+abstract contract BLSSignatureChecker {
     using BytesLib for bytes;
     // DATA STRUCTURES
     /**
diff -druN ../smiddleware/PaymentManager.sol middleware/PaymentManager.sol
--- ../smiddleware/PaymentManager.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/PaymentManager.sol	2022-12-21 07:19:44.000000000 -0800
@@ -10,8 +10,6 @@
 import "../interfaces/IPaymentManager.sol";
 import "../permissions/Pausable.sol";
 
-// import "forge-std/Test.sol";
-
 /**
  * @title Controls 'rolled-up' middleware payments.
  * @author Layr Labs, Inc.
diff -druN ../smiddleware/RegistryBase.sol middleware/RegistryBase.sol
--- ../smiddleware/RegistryBase.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/RegistryBase.sol	2022-12-21 07:19:44.000000000 -0800
@@ -7,8 +7,6 @@
 import "../libraries/BytesLib.sol";
 import "./VoteWeigherBase.sol";
 
-import "forge-std/Test.sol";
-
 /**
  * @title An abstract Registry-type contract that is signature scheme agnostic.
  * @author Layr Labs, Inc.
diff -druN ../smiddleware/VoteWeigherBase.sol middleware/VoteWeigherBase.sol
--- ../smiddleware/VoteWeigherBase.sol	2022-12-28 09:56:31.000000000 -0800
+++ middleware/VoteWeigherBase.sol	2022-12-21 07:19:44.000000000 -0800
@@ -5,8 +5,6 @@
 import "../interfaces/IInvestmentManager.sol";
 import "./VoteWeigherBaseStorage.sol";
 
-// import "forge-std/Test.sol";
-
 /**
  * @title A simple implementation of the `IVoteWeigher` interface.
  * @author Layr Labs, Inc.
diff -druN ../spermissions/Pausable.sol permissions/Pausable.sol
--- ../spermissions/Pausable.sol	2022-12-28 09:56:31.000000000 -0800
+++ permissions/Pausable.sol	2022-12-21 07:19:44.000000000 -0800
@@ -4,8 +4,6 @@
 
 import "../interfaces/IPauserRegistry.sol";
 
-// import "forge-std/Test.sol";
-
 /**
  * @title Adds pausability to a contract.
  * @author Layr Labs, Inc.
diff -druN ../spods/EigenPod.sol pods/EigenPod.sol
--- ../spods/EigenPod.sol	2022-12-28 09:56:31.000000000 -0800
+++ pods/EigenPod.sol	2022-12-21 07:19:44.000000000 -0800
@@ -11,10 +11,6 @@
 import "../interfaces/IEigenPodManager.sol";
 import "../interfaces/IEigenPod.sol";
 import "../interfaces/IBeaconChainETHReceiver.sol";
- import "forge-std/Test.sol";
-
-
-import "forge-std/Test.sol";
 
 
 /**
@@ -28,7 +24,7 @@
  * - updating aggregate balances in the EigenPodManager
  * - withdrawing eth when withdrawals are initiated
  */
-contract EigenPod is IEigenPod, Initializable, DSTest
+contract EigenPod is IEigenPod, Initializable
 {
     using BytesLib for bytes;
 
diff -druN ../spods/EigenPodManager.sol pods/EigenPodManager.sol
--- ../spods/EigenPodManager.sol	2022-12-28 09:56:31.000000000 -0800
+++ pods/EigenPodManager.sol	2022-12-21 07:19:44.000000000 -0800
@@ -16,8 +16,6 @@
 import "../interfaces/IEigenPod.sol";
 import "../interfaces/IBeaconChainOracle.sol";
 
- import "forge-std/Test.sol";
-
 /**
  * @title The contract used for creating and managing EigenPods
  * @author Layr Labs, Inc.
@@ -27,7 +25,7 @@
  * - keeping track of the balances of all validators of EigenPods, and their stake in EigenLayer
  * - withdrawing eth when withdrawals are initiated
  */
-contract EigenPodManager is Initializable, OwnableUpgradeable, IEigenPodManager, DSTest
+contract EigenPodManager is Initializable, OwnableUpgradeable, IEigenPodManager
 {
     //TODO: change this to constant in prod
     IETHPOSDeposit immutable ethPOS;
@@ -90,7 +88,6 @@
         if(!hasPod(msg.sender)) {
             //deploy a pod if the sender doesn't have one already
             pod = _deployPod();
-            emit log_named_address("new pod deplohed", address(pod));
         }
         pod.stake{value: msg.value}(pubkey, signature, depositDataRoot);
     }
