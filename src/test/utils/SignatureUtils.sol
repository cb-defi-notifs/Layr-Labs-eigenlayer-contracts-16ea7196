// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

import "forge-std/Test.sol";
contract SignatureUtils is Test {
    //numSigners => array of signatures for 5 datastores
    mapping(uint256 => uint256[]) signatures;

    //returns aggPK.X0, aggPK.X1, aggPK.Y0, aggPK.Y1
    function getAggregatePublicKeyG2(uint256 numSigners)
        internal
        pure
        returns (uint256 aggPKX0, uint256 aggPKX1, uint256 aggPKY0, uint256 aggPKY1)
    {
        if (numSigners == 15) {
            aggPKX0 = uint256(7376274458580875068538505365497674110973608605111371869915951041641187498045);
            aggPKX1 = uint256(3094945706001872520104452539421662819380827348948823620107090636164879063149);
            aggPKY0 = uint256(300514952659116390245673944230061207864254950979557757766045418512193657473);
            aggPKY1 = uint256(11092030367516940214387670815962566851846599159064241705731768948492732902051);
        }

        // if (numSigners == 12) {
        //     aggPKX0 = uint256(20523582188987110963974014007824533452740581058607457454770751475798461856790);
        //     aggPKX1 = uint256(20393417418446180824691701320817867938900127424537147567714032244707813600661);
        //     aggPKY0 = uint256(4580400133570387826450637471880405528743156066723364760569449578582741304616);
        //     aggPKY1 = uint256(18368086142287310978311059387137837113783403751688539310101965155145837418588);
        // }
        // if (numSigners == 2) {
        //     aggPKX0 = uint256(13627094809349703367331537758720731786358666292976582438286769018059426535468);
        //     aggPKX1 = uint256(15990633073361304694314105299377655728793875331567860871472029130760161396005);
        //     aggPKY0 = uint256(18114822758555812654133893143402128050216537048086929991467442905992867018238);
        //     aggPKY1 = uint256(15529882236060906134687395001693316326465762665051267458815387894544183627019);
        // }

        return (aggPKX0, aggPKX1, aggPKY0, aggPKY1);
    }

    //returns aggPK.X, aggPK.Y
    function getAggregatePublicKeyG1(uint256 numSigners)
        internal 
        returns (uint256 aggPKX, uint256 aggPKY)
    {
        
        
        if (numSigners == 15) {
            aggPKX = uint256(12983748507877516445801030711848696691328044158037221152769366935044672217822);
            aggPKY = uint256(3329099471873996955795274682525042276934219997746137153411426130230036322381);
        }

        // if (numSigners == 12) {
        //     aggPKX = uint256(20523582188987110963974014007824533452740581058607457454770751475798461856790);
        //     aggPKY = uint256(18368086142287310978311059387137837113783403751688539310101965155145837418588);
        // }
        // if (numSigners == 2) {
        //     aggPKX = uint256(13627094809349703367331537758720731786358666292976582438286769018059426535468);
        //     aggPKY = uint256(15529882236060906134687395001693316326465762665051267458815387894544183627019);
        // }

        return (aggPKX, aggPKY);
    }

    function getSignature(uint256 numSigners, uint256 index) internal view returns (uint256, uint256) {
        return (signatures[numSigners][2 * index], signatures[numSigners][2 * index + 1]);
    }

    function setSignatures() internal {
        //X-coordinate for signature
        signatures[15].push(uint256(5271885887808767564431391467360670698669934366873223769414372420690360622123));
        //Y-coordinate for signature
        signatures[15].push(uint256(1598651173596906994936146249926796260210958417922248864381156409483173072775));


        /// @dev these next 4 aggregate signatures are specifically for testConfirmDataStoreLoop, where 
        ///      globalDataStoreID and index are incremented, which changes the msgHash, requiring new agg signatures.

        // //X-coordinate for signature
        // signatures[15].push(uint256(3768102256762337404052867633199540834071715013336059969755534978335414815915));
        // //Y-coordinate for signature
        // signatures[15].push(uint256(1347732725763368146376839019105722102118183430445244463171147039833656430554));
        
        // //X-coordinate for signature
        // signatures[15].push(uint256(17726052552451194045498831446622391523712052718156013644001539561406531574296));
        // //Y-coordinate for signature
        // signatures[15].push(uint256(21548143511877874702515855361829893658157938210262199838254421299589869143948));

        // //X-coordinate for signature
        // signatures[15].push(uint256(18456695013140797630139570327999178712970087934218862167996303262756077265885));
        // //Y-coordinate for signature
        // signatures[15].push(uint256(6692040044674932411543245093209937967397201373852910194529170609645372186580));

        // //X-coordinate for signature
        // signatures[15].push(uint256(16936593860632559597797231574125317688131352946934229986716277496846837045926));
        // //Y-coordinate for signature
        // signatures[15].push(uint256(8419080474874111328448521941401302337127845046207972316360714449012068914811));

        // //X-coordinate for signature
        // signatures[12].push(uint256(18984184697644363675345717428833426720816735538703890129083867845101356547512));
        // //Y-coordinate for signature
        // signatures[12].push(uint256(13901218866265249360377869173958633007705926687970641308083042116030556327083));

        // //X-coordinate for signature
        // signatures[2].push(uint256(15462773903105570423983200028906973961348449005977379407744153690820070538946));
        // //Y-coordinate for signature
        // signatures[2].push(uint256(1958496896045946333699360997077644865789632650763255938686790892516574013948));




        
    }
}
